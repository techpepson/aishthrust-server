// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String
  password         String
  balance          Decimal          @default(0)
  referralCode     String?           @unique
  referralCount    Int?              @default(0)
  referralEarnings Decimal?          @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  investments      Investment[]
  transactions     Transaction[]
  gameOrders       GameOrder[]
  giftCardOrders   GiftCardOrder[]
  referredBy       String?
  shop             Shop?
}

model Investment {
  id            String    @id @default(uuid())
  userId        String
  amount        Decimal
  dailyReturn   Decimal
  duration      Int       // in days
  totalReturn   Decimal
  status        String    // ACTIVE, COMPLETED, CANCELLED
  startDate     DateTime  @default(now())
  endDate       DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
}

model Transaction {
  id        String    @id @default(uuid())
  userId    String
  type      String    // DEPOSIT, WITHDRAWAL, INVESTMENT_RETURN, REFERRAL_BONUS, WALLET_TOPUP
  amount    Decimal
  status    String    // PENDING, COMPLETED, FAILED
  reference String?   // For payment verification
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model GameOrder {
  id        String    @id @default(uuid())
  userId    String
  gameType  String    // PUBG, FREE_FIRE, COD, FORTNITE
  playerId  String
  amount    Decimal
  currency  String    // UC, DIAMONDS, CP, V-BUCKS
  quantity  Int
  status    String    // PENDING, COMPLETED, FAILED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model GiftCardOrder {
  id        String    @id @default(uuid())
  userId    String
  type      String    // GOOGLE_PLAY, APPLE, STEAM, PLAYSTATION
  amount    Decimal
  email     String
  status    String    // PENDING, COMPLETED, FAILED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Shop {
  id        String   @id @default(uuid())
  name      String
  playerId  String   @unique
  player    User     @relation(fields: [playerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

